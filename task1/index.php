<h2>Задание №1</h2>

<h3>1.1 Определить сложность следующих алгоритмов:</h3>
<ul>
<li><b>Поиск элемента массива с известным индексом.</b> Тут вопрос интересный. 
Если это классический массив C, то обращение к элементу моментальное O(1). Если это PHP array,
то по сути идет поиск индекса по дереву и скорее всего O(log<sub>2</sub>n). </li>
<li><b>Дублирование одномерного массива через foreach</b>. O(n).</li>
<li><b>Рекурсивная функция нахождения факториала числа</b>. O(n)</li>
<li><b>Удаление элемента массива с известным индексом</b>. Если это массив PHP array, то
скорее всего O(log<sub>2</sub>n) - это время нужно для того, чтобы найти нужный индекс. А Удаление
скорее всего сводится переобозначению next и prev у соседних элементов.</li>
</ul>

<h3>1.2.Определить сложность следующих алгоритмов. Сколько произойдет итераций?</h3>
<p>a)<br>
$n = 10000;<br>
$array[]= [];<br>

for ($i = 0; $i < $n; $i++) {<br>
  for ($j = 1; $j < $n; $j *= 2) {<br>
     $array[$i][$j]= true;<br>
}<br> }
</p>
<p><b>Ответ: O(n * log<sub>2</sub>n), 140 000.</b></p>

<p>b)<br>
$n = 10000;<br>
$array[]= [];<br>

for ($i = 0; $i < $n; $i += 2) {<br>
  for ($j = $i; $j < $n; $j++) {<br>
   $array[$i][$j]= true;<br>
} <br>}
</p>
<p><b>Ответ: O(n<sup>2</sup>), 25 000 000 (сумма арифметической прогрессии: 
10 000, 9 998, 9 996, .., 2, 0). Считается сумма как первый плюс последний элемент деленный на 2 и умноженный на количество элементов.</b></p>

<p>
c)<br>
$n = 10000;<br>
$array[] = [];<br>
foo($n);<br>

function foo($n)<br>
{<br>
while ($n > 0) {<br>
for ($j =0; $j < $n; $j++) {<br>
$n--;<br>
foo($n);<br>
}<br>
}<br>
}
</p>
<p><b>Ответ: O(n!), 10000!</b></p>